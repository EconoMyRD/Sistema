package br.com.economy.DAO;


import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import javax.persistence.EntityManager;
import javax.persistence.Query;
import javax.persistence.TypedQuery;

import com.google.gson.Gson;

import br.com.economy.entities.ModelQuery;
import br.com.economy.entities.SubCategory;
import br.com.economy.entities.Transacao;
import br.com.economy.util.HibernateUtil;

public class TransactionDAO 
{
EntityManager em = HibernateUtil.getEntityManager();
	
	
	public String getDataForGraphic(Date dateStart, Date dateEnd, int category){
			
//		TypedQuery<ModelQuery> query = em.createQuery(
//				"select new br.com.economy.entities.ModelQuery (t.valor, t.subcategoria.nome, "
//				+ " t.data_transacao, t.subcategoria.id, t.subcategoria.categoria_id) "
//				+ " from Transacao t "
//				+ " where t.subcategoria.categoria_id = :category and "
//				+ "  t.data_transacao between :dateStart and :dateEnd ",
//				//+ " group by t.subcategoria.nome, t.data_transacao, t.subcategoria.id, t.subcategoria.categoria_id",
//				ModelQuery.class);
		Query query = em.createNativeQuery("select  sum(t.valor) as value, s.nome, t.data_transacao as date, "
				+ " s.subcategoria_id as subcategoria, s.categoria_id as categoria "
				+ " from transacao t "
				+ " join subcategoria s "
				+ " on t.subcategoria = s.subcategoria_id "
				+ " where s.categoria_id = ? "
				+ " and t.data_transacao between ? and ? "
				+ " group by s.nome, t.data_transacao, s.subcategoria_id, s.categoria_id");
		
		query.setParameter(1, category);
		query.setParameter(2, dateStart);
		query.setParameter(3, dateEnd);
		
		List<ModelQuery> list = new ArrayList<ModelQuery>();
		list = query.getResultList();
		System.out.println(list.size());

		Gson gson = new  Gson();
		String json = gson.toJson(list);
		System.out.println(json.indexOf(0));
		return json;
	}
	
	public void Insert(Transacao transacao)
	{
		em.getTransaction().begin();
		em.persist(transacao);
		em.getTransaction().commit();
	}

	public void Update(Transacao transacao)
	{
		em.getTransaction().begin();
		em.merge(transacao);
		em.getTransaction().commit();
	}

	public Transacao GetTransacaoById(Integer idtransacao)
	{
		Transacao transacao = em.find(Transacao.class, idtransacao);
		return transacao;
	}

	
	public TransactionDAO() 
	{
	}
}
